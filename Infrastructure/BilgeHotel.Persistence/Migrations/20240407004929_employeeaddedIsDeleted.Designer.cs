// <auto-generated />
using System;
using BilgeHotel.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BilgeHotel.Persistence.Migrations
{
    [DbContext(typeof(BilgeHotelContext))]
    [Migration("20240407004929_employeeaddedIsDeleted")]
    partial class employeeaddedIsDeleted
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployePassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.EmployeePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("PriceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PriceTypeId");

                    b.ToTable("EmployeePrices");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Identity.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Identity.EmployeeRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "17a98e81-4bf9-497a-bc2e-4cb453c00e15",
                            Name = "Resepsiyon görevlisi"
                        },
                        new
                        {
                            Id = "2f9d0b97-e9d3-4191-8567-a3f30cb483ff",
                            Name = "Temizlik görevlisi"
                        },
                        new
                        {
                            Id = "1d865739-543f-4a6e-9dcf-a80bc5adfeca",
                            Name = "Aşçı"
                        },
                        new
                        {
                            Id = "db7a520b-48a8-411d-a689-e0ca25075b70",
                            Name = "Garson"
                        },
                        new
                        {
                            Id = "e0d275c2-8957-4fa3-9ae4-c80acad36351",
                            Name = "Elektrikçi"
                        },
                        new
                        {
                            Id = "288aae38-5108-4632-b738-9fcf0e88e383",
                            Name = "Bilgi işlem sorumlusu"
                        },
                        new
                        {
                            Id = "d15bc933-f383-41b2-9d7d-471dddeb1a8a",
                            Name = "Yönetim"
                        },
                        new
                        {
                            Id = "f0f6567c-5f18-4ac1-b097-99d48a9dea59",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.PriceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PriceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 645, DateTimeKind.Local).AddTicks(3564),
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Saatlik"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 645, DateTimeKind.Local).AddTicks(3584),
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Günlük"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 645, DateTimeKind.Local).AddTicks(3587),
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Aylık"
                        });
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CancelDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<decimal>("RealPrice")
                        .HasColumnType("money");

                    b.Property<decimal?>("RefuendedPrice")
                        .HasColumnType("money");

                    b.Property<int>("ReservationStateId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeId");

                    b.HasIndex("ReservationStateId");

                    b.HasIndex("ReservationTypeId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.ReservationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ReservationsStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 646, DateTimeKind.Local).AddTicks(3947),
                            Description = "ödemesi alındı gerçekleştirilecek",
                            IsDeleted = false,
                            IsPassive = false,
                            StateName = "Planlandı"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 646, DateTimeKind.Local).AddTicks(3962),
                            Description = "Kiralama işlemi başarıyla gerçekleşti",
                            IsDeleted = false,
                            IsPassive = false,
                            StateName = "Tamamlandı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 646, DateTimeKind.Local).AddTicks(3964),
                            Description = "rezervasyonu güncelleyerek iade edilecek tutarı yazmayı ve iade sebebini açıklamayı unutmayınız",
                            IsDeleted = false,
                            IsPassive = false,
                            StateName = "İptal-iadeli"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 646, DateTimeKind.Local).AddTicks(3966),
                            Description = "rezervasyonu güncelleyerek açıklamaya iade sebebini yazmayı unutmayınız",
                            IsDeleted = false,
                            IsPassive = false,
                            StateName = "İptal-iadesiz"
                        });
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.ReservationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ReservationsTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 646, DateTimeKind.Local).AddTicks(4806),
                            Description = "Konaklama ücretine kahvaltı, öğle yemeği ve akşam yemeği dahildir.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Tam pansiyon"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 646, DateTimeKind.Local).AddTicks(4854),
                            Description = "Konaklama ücretine yemeklerin yanı sıra içecekler ve bazı aktiviteler de dahildir.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Her şey dahil"
                        });
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<short>("RoomNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("RoomStateId")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("RoomStateId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.RoomState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RoomsStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 647, DateTimeKind.Local).AddTicks(2303),
                            IsDeleted = false,
                            IsPassive = false,
                            Note = "Kiralama yapılamaz",
                            State = "Dolu"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 647, DateTimeKind.Local).AddTicks(2312),
                            IsDeleted = false,
                            IsPassive = false,
                            Note = "Temizlendi eksikleri giderildi yeni müşterisini bekliyor",
                            State = "Boş"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 647, DateTimeKind.Local).AddTicks(2314),
                            IsDeleted = false,
                            IsPassive = false,
                            Note = "Oda boşaldı temizlik personeli bekliyor",
                            State = "Temizlenecek"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 647, DateTimeKind.Local).AddTicks(2316),
                            IsDeleted = false,
                            IsPassive = false,
                            Note = "Oda'da arıza mevcut teknisyen bekliyor",
                            State = "Bakım"
                        });
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RoomsTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 647, DateTimeKind.Local).AddTicks(3139),
                            Description = "Tek kişilik yataklı odalar. Her katta bulunabilir. Oda özellikleri: Kahvaltı, öğle yemeği ve akşam yemeği dahil değildir. Minibar, klima, TV, saç kurutma makinesi ve kablosuz internet standarttır.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Tek Kişilik Oda"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 647, DateTimeKind.Local).AddTicks(3146),
                            Description = "İki kişilik yataklı odalar. Her katta bulunabilir. Oda özellikleri: Kahvaltı, öğle yemeği ve akşam yemeği dahil değildir. Minibar, klima, TV, saç kurutma makinesi ve kablosuz internet standarttır.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "İki Kişilik Oda"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 647, DateTimeKind.Local).AddTicks(3148),
                            Description = "Üç kişilik yataklı odalar. Yalnızca birinci katta bulunabilir. Oda özellikleri: Kahvaltı, öğle yemeği ve akşam yemeği dahil değildir. Minibar, klima, TV, saç kurutma makinesi ve kablosuz internet standarttır.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Üç Kişilik Oda"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 647, DateTimeKind.Local).AddTicks(3149),
                            Description = "Dört kişilik yataklı odalar. Yalnızca dördüncü katta bulunabilir. Oda özellikleri: Kahvaltı, öğle yemeği ve akşam yemeği dahil değildir. Minibar, klima, TV, saç kurutma makinesi ve kablosuz internet standarttır.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Dört Kişilik Oda"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 4, 7, 3, 49, 28, 647, DateTimeKind.Local).AddTicks(3151),
                            Description = "Özel bir konaklama deneyimi sunan lüks daire. Yalnızca dördüncü katta bulunabilir. Oda özellikleri: Kahvaltı, öğle yemeği ve akşam yemeği dahil değildir. Balkon bulunmaktadır. Minibar, klima, TV, saç kurutma makinesi ve kablosuz internet standarttır.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Kral Dairesi"
                        });
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExcuseDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RealEndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RealStartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftStateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShiftStateId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.ShiftState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ShiftStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Planlama gerçekleşti uyulması bekleniyor.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Planlanan"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Uyum sağlandı tam zamanlı çalışıldı.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Tamamlandı"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Çalışan geç geldiyse shifti güncelleyerek gerçek giriş saatini doldurunuz ve açıklamasını yazınız.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Geç Geldi"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Çalışan erken çıktı ise shifti güncelleyerek gerçek çıkış saatini doldurunuz ve açıklamasını yazınız.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Erken Çıktı"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Çalışan geç gelip erken çıktı ise shifti güncelleyerek gerçek giriş ve çıkış saatlerini doldurunuz ayrıca açıklamasını yazınız.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Geç Geldi Ve Erken Çıktı"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Çalışan haberli veya habersiz gelmedi ise shifti güncelleyerek çalışma tipini 'Ücretli Mazeret İzni' veya 'Ücretsiz Mazeret İzni' olarak güncelleyiniz.",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Gelmedi"
                        });
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.WorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPassive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sabah vardiyası: 08:00 - 16:00 1/3",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Normal Mesai Sabah "
                        },
                        new
                        {
                            Id = 2,
                            Description = "Akşam vardiyası: 16:00 - 00:00 1/3",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Normal Mesai Akşam "
                        },
                        new
                        {
                            Id = 3,
                            Description = "Gece vardiyası: 00:00 - 08:00 1/3",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Normal Mesai Gece"
                        },
                        new
                        {
                            Id = 4,
                            Description = "mesai saatleri 8:00 ile 18:00",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Normal Mesai"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ücretli Ek Mesai",
                            IsDeleted = false,
                            IsPassive = false,
                            Name = "Ek Mesai"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.EmployeePrice", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Identity.Employee", "Employee")
                        .WithMany("EmployeePrices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilgeHotel.Domain.Entities.PriceType", "PriceType")
                        .WithMany("employeePrices")
                        .HasForeignKey("PriceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PriceType");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Identity.EmployeeRole", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Identity.Employee", null)
                        .WithMany("Roles")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Image", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Room", "Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Customer", "customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilgeHotel.Domain.Entities.Identity.Employee", "employee")
                        .WithMany("Reservations")
                        .HasForeignKey("EmployeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilgeHotel.Domain.Entities.ReservationState", "reservationState")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilgeHotel.Domain.Entities.ReservationType", "reservationType")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilgeHotel.Domain.Entities.Room", "room")
                        .WithMany("reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("employee");

                    b.Navigation("reservationState");

                    b.Navigation("reservationType");

                    b.Navigation("room");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Room", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.RoomState", "roomState")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilgeHotel.Domain.Entities.RoomType", "roomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roomState");

                    b.Navigation("roomType");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Shift", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Identity.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilgeHotel.Domain.Entities.ShiftState", "shiftState")
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilgeHotel.Domain.Entities.WorkType", "workType")
                        .WithMany("Shifts")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("shiftState");

                    b.Navigation("workType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Identity.EmployeeRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Identity.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Identity.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Identity.EmployeeRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BilgeHotel.Domain.Entities.Identity.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BilgeHotel.Domain.Entities.Identity.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Identity.Employee", b =>
                {
                    b.Navigation("EmployeePrices");

                    b.Navigation("Reservations");

                    b.Navigation("Roles");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.PriceType", b =>
                {
                    b.Navigation("employeePrices");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.ReservationState", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.ReservationType", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.Room", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("reservations");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.RoomState", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.ShiftState", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("BilgeHotel.Domain.Entities.WorkType", b =>
                {
                    b.Navigation("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
